---
import { Image } from 'astro:assets'
import Door from '../assets/images/pa58_images/door.jpg'
import Path from '../assets/images/pa58_images/path.jpg'
import Sign from '../assets/images/pa58_images/sign.jpg'
import Map from '../assets/images/map.png'
import GoogleIcon from './Icon_GoogleMap.astro'
import TreasureMapIcon from './Icon_TreasureMap.astro'
import ImagesIcon from './Icon_Images.astro'
import { twMerge } from 'tailwind-merge'

interface Props {
  ContainerClasses?: string
  TextClasses?: string
  HeadingClasses?: string
}

const {
  ContainerClasses = '',
  TextClasses = '',
  HeadingClasses,
}: Props = Astro.props

const baseContainerClasses = 'w-full'
const mergedContainerClasses = twMerge(baseContainerClasses, ContainerClasses)

const baseTextClasses = 'prose font-merri base-content'
const mergedTextClasses = twMerge(baseTextClasses, TextClasses)

const baseHeadingClasses =
  'prose text-xl font-gokhan text-secondary-content tracking-wider'
const mergedHeadingClasses = twMerge(baseHeadingClasses, HeadingClasses)
---

<div class={mergedContainerClasses}>
  <div>
    <h1 class={mergedHeadingClasses}>FIND US</h1>
    <div class="w-full">
      <div class="flex flex-row justify-between gap-x-8 w-full">
        <div class={mergedTextClasses}>
          We dance Forró, every Tuesday<br /> from 19:30 to 22:00 <br /> in the
          <label
            for="mapModal"
            class="underline underline-offset-4 hover:no-underline cursor-pointer"
            >Café of Prinzenallee 58</label
          >
        </div>
        <div class="flex flex-col md:flex-row gap-8 justify-end items-start">
          <label for="mapModal" class="cursor-pointer"
            ><TreasureMapIcon className="w-8 md:w-13" /></label
          >
          <GoogleIcon className="w-6 ml-1 md:ml-0 md:w-8" />
        </div>
      </div>

      <div
        class="flex flex-row gap-x-4 md:gap-x-8 mt-2 md:mt-4 items-center justify-between w-full"
      >
        <div class={mergedTextClasses}>
          Once in the first backyard,<br />
          <label
            for="wayModal"
            class="underline underline-offset-4 hover:no-underline cursor-pointer"
            >This is the way</label
          >
          to go.
        </div>

        <div>
          <label
            for="wayModal"
            class="underline underline-offset-4 hover:no-underline cursor-pointer"
          >
            <ImagesIcon className="w-8 md:w-12" />
          </label>
        </div>
      </div>
    </div>

    <!-- MAP modal  -->
    <input type="checkbox" id="mapModal" class="modal-toggle" />
    <div class="modal" role="dialog">
      <div
        class="modal-box max-h-[95vh] max-w-2xl items-center justify-center p-0"
      >
        <div
          id="imagesModalContent"
          class="pointer-events-auto bg-gray-50 rounded-md shadow-xl md:max-h-[95vh] md:max-w-[70vw] flex flex-col md:flex-row items-center gap-5 relative group"
        >
          <!-- close X button -->
          <label class="p-2 rounded-md absolute top-2 right-2" for="mapModal">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-6 h-6 hover:scale-110 hover:text-accent transition-transform duration-900"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </label>
          <Image
            src={Map}
            alt="Map showing Prinzenallee 58 public transport connections"
            class="w-full md:max-h-[95vh] md:max-w-2xl rounded-md object-contain"
            loading="eager"
            widths={[300, 600, 800]}
            sizes="(max-width: 768px) 80vw, 90vw"
          />
        </div>
      </div>
      <label class="modal-backdrop" for="mapModal">Close</label>
    </div>

    <!-- WAY TO GO modal -->
    <input type="checkbox" id="wayModal" class="modal-toggle" />
    <div class="modal" role="dialog">
      <div class="modal-box hidescrollbar max-h-[95vh] max-w-[90vw] p-0">
        <div
          id="imagesModalContent"
          class="pointer-events-auto bg-base-100 md:p-5 p-2 rounded-md max-h-[95vh] max-w-[90vw] flex flex-col md:flex-row items-center gap-2 md:gap-5 relative group"
        >
          <!-- close X button -->
          <label
            class="bg-base-100 p-1 md:p-2 rounded-bl-md absolute top-1 right-1 md:top-2 md:right-2 z-10"
            for="wayModal"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-6 h-6 hover:scale-110 hover:text-accent transition-transform duration-900"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </label>
          <Image
            src={Sign}
            alt="Signs"
            class="w-full md:flex-1 max-w-full rounded-md aspect-square object-cover"
          />

          <Image
            src={Path}
            alt="Path"
            class="w-full md:flex-1 max-w-full rounded-md aspect-square object-cover"
          />

          <Image
            src={Door}
            alt="Door"
            class="w-full md:flex-1 max-w-full rounded-md aspect-square object-cover"
          />
        </div>
      </div>
      <label class="modal-backdrop" for="wayModal">Close</label>
    </div>

    <script is:inline>
      // Get references to elements
      const mapLink = document.getElementById('mapLink')
      const mapModal = document.getElementById('mapModal')
      const mapModalContent = document.getElementById('mapModalContent')

      const imagesLink = document.getElementById('imagesLink')
      const imagesModal = document.getElementById('imagesModal')
      const imagesModalContent = document.getElementById('imagesModalContent')

      // --- Map Modal Logic ---
      if (mapLink && mapModal && mapModalContent) {
        mapLink.addEventListener('click', (e) => {
          e.preventDefault() // Prevent default link navigation
          mapModal.classList.remove('hidden') // Show the modal
          // Optional: Add a class to body to prevent scrolling when modal is open
          // document.body.classList.add('overflow-hidden');
        })

        // Close when mouse leaves the modal content area
        mapModalContent.addEventListener('mouseleave', () => {
          mapModal.classList.add('hidden') // Hide the modal
          // document.body.classList.remove('overflow-hidden');
        })

        // Close when clicking on the backdrop itself (not the content)
        mapModal.addEventListener('click', (e) => {
          if (e.target === mapModal) {
            mapModal.classList.add('hidden')
            // document.body.classList.remove('overflow-hidden');
          }
        })
      }

      // --- Three Images Modal Logic ---
      if (imagesLink && imagesModal && imagesModalContent) {
        imagesLink.addEventListener('click', (e) => {
          e.preventDefault() // Prevent default link navigation
          imagesModal.classList.remove('hidden') // Show the modal
          // Optional: Add a class to body to prevent scrolling when modal is open
          // document.body.classList.add('overflow-hidden');
        })

        // Close when mouse leaves the modal content area
        imagesModalContent.addEventListener('mouseleave', () => {
          imagesModal.classList.add('hidden') // Hide the modal
          // document.body.classList.remove('overflow-hidden');
        })

        // Close when clicking on the backdrop itself (not the content)
        imagesModal.addEventListener('click', (e) => {
          if (e.target === imagesModal) {
            imagesModal.classList.add('hidden')
            // document.body.classList.remove('overflow-hidden');
          }
        })
      }
    </script>
  </div>
</div>
<style>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .hidescrollbar::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .hidescrollbar {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
</style>
