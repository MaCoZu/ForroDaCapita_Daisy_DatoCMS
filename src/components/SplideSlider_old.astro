---
interface Props {
  images?: Array<{
    id: string
    url: string
    alt?: string
  }>
  thumbnailHeight?: string // Allow customizable thumbnail height
}

const { images = [], thumbnailHeight = 'h-16' } = Astro.props
---

<!-- Modal Backdrop -->
<div
  id="galleryModal"
  class="fixed inset-0 z-40 hidden bg-primary/60 backdrop-blur-sm"
  role="dialog"
  aria-modal="true"
  aria-labelledby="gallery-title"
>
  <!-- Modal Content Container - Responsive Layout -->
  <div
    class="relative w-full h-full flex flex-col md:flex-row items-center justify-center p-2 sm:p-4"
  >
    <!-- Close Button - positioned at top right -->
    <button
      id="closeGallery"
      class="absolute top-4 right-4 z-50 bg-white/20 hover:bg-white/30 rounded-full p-2 sm:p-3 transition-all duration-300 hover:scale-110 group backdrop-blur-sm"
      aria-label="Close gallery"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-4 h-4 sm:w-5 sm:h-5 text-white group-hover:text-red-400"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>

    <!-- Main Content Area -->
    <div
      class="flex flex-col md:flex-row w-full h-full max-w-2xl mx-auto gap-4"
    >
      <!-- Primary Image Section -->
      <div class="flex-1 flex flex-col justify-center min-h-0">
        <!-- Primary Slider -->
        <section
          id="primary_slider"
          class="splide primary-slider"
          aria-label="Lost & Found Items Gallery"
        >
          <div class="splide__track rounded-lg overflow-hidden">
            <ul class="splide__list">
              {
                images.map((image) => (
                  <li class="splide__slide">
                    <div class="flex items-center justify-center h-full">
                      <img
                        src={image.url}
                        alt={image.alt || 'Lost & Found item'}
                        class="w-full h-full object-contain md:object-contain rounded-lg shadow-2xl"
                        loading="lazy"
                      />
                    </div>
                  </li>
                ))
              }
            </ul>
          </div>
        </section>

        <!-- Slide Counter -->
        <div class="text-center mt-2 md:mt-4">
          <span
            id="slideCounter"
            class="text-white/90 text-sm sm:text-base font-medium px-3 py-1 rounded-full backdrop-blur-sm"
          >
            1 / {images.length}
          </span>
        </div>
      </div>

      <!-- Thumbnail Section -->
      <div class="w-full md:w-32 lg:w-40 flex-shrink-0">
        <section
          id="thumbnail_slider"
          class="splide thumbnail-slider h-full"
          aria-label="Thumbnail Navigation"
        >
          <div class="splide__track h-full">
            <ul class="splide__list gap-2 md:gap-3 h-full">
              {
                images.map((image) => (
                  <li class="splide__slide">
                    <div
                      class={`thumbnail-container w-16 sm:w-20 md:w-full ${thumbnailHeight} md:h-20 lg:h-24 overflow-hidden rounded-md border-2 border-transparent transition-all duration-300 cursor-pointer`}
                    >
                      <img
                        src={image.url}
                        alt={image.alt || 'Lost & Found item thumbnail'}
                        class="w-full h-full object-cover transition-transform duration-300 hover:scale-110"
                        loading="lazy"
                      />
                    </div>
                  </li>
                ))
              }
            </ul>
          </div>
        </section>
      </div>
    </div>
  </div>
</div>

<style>
  @reference '../styles/main.css' 
  
  .primary-slider .splide__slide {
    @apply flex items-center justify-center;
    height: 60vh;
    min-height: 300px;
  }

  .primary-slider .splide__slide img {
    @apply h-full w-full object-contain;
    max-width: 100%;
    max-height: 100%;
  }

  /* Active thumbnail styling */
  .thumbnail-slider .splide__slide.is-active .thumbnail-container {
    @apply border-white/80 shadow-lg;
  }

  /* Thumbnail slider direction - horizontal on mobile, vertical on md+ */
  .thumbnail-slider .splide__track {
    @apply h-full;
  }

  .thumbnail-slider .splide__list {
    @apply h-full flex-row md:flex-col;
  }

  /* Custom arrow styles for thumbnails */
  .thumbnail-slider .splide__arrow {
    @apply h-8 w-8 rounded-full border-0 bg-white/20 opacity-80 transition-all duration-300 md:h-10 md:w-10;
  }

  .thumbnail-slider .splide__arrow:hover {
    @apply scale-110 bg-white/30 opacity-100;
  }

  .thumbnail-slider .splide__arrow svg {
    @apply h-4 w-4 fill-white md:h-5 md:w-5;
  }

  /* Arrow positioning - horizontal layout on mobile */
  .thumbnail-slider .splide__arrow--prev {
    left: -2rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .thumbnail-slider .splide__arrow--next {
    right: -2rem;
    top: 50%;
    transform: translateY(-50%);
  }

  /* Arrow positioning - vertical layout on md+ screens */
  @media (min-width: 768px) {
    .thumbnail-slider .splide__arrow--prev {
      left: 50%;
      top: -2.5rem;
      transform: translateX(-50%) rotate(-90deg);
    }

    .thumbnail-slider .splide__arrow--next {
      left: 50%;
      top: auto;
      bottom: -2.5rem;
      right: auto;
      transform: translateX(-50%) rotate(90deg);
    }
  }

  /* Hide pagination dots */
  .splide__pagination {
    @apply hidden;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 767px) {
    .primary-slider .splide__slide {
      height: 50vh;
      min-height: 250px;
    }

    .primary-slider .splide__slide img {
      @apply h-full w-full object-contain;
    }

    .thumbnail-slider .splide__arrow--prev {
      left: -1.5rem;
    }

    .thumbnail-slider .splide__arrow--next {
      right: -1.5rem;
    }
  }

  /* Medium screens and up - vertical thumbnail layout */
  @media (min-width: 768px) {
    .primary-slider .splide__slide {
      height: 70vh;
      min-height: 400px;
    }

    .primary-slider .splide__slide img {
      @apply object-contain;
    }
  }
</style>

<script>
  import { Splide } from '@splidejs/splide'
  import '@splidejs/splide/dist/css/splide.min.css'

  let primarySlider: Splide | null = null
  let thumbnailSlider: Splide | null = null
  let isModalOpen = false

  // Initialize modal functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('galleryModal')
    const openButton = document.getElementById('openGallery')
    const closeButton = document.getElementById('closeGallery')
    const slideCounter = document.getElementById('slideCounter')

    // Function to open modal
    function openModal() {
      if (!modal) return

      modal.classList.remove('hidden')
      isModalOpen = true
      document.body.style.overflow = 'hidden'

      if (!primarySlider || !thumbnailSlider) {
        // Primary slider
        primarySlider = new Splide('#primary_slider', {
          type: 'fade',
          rewindByDrag: true,
          // keyboard: 'global', // Enable global keyboard navigation
          wheel: true,
          heightRatio: 0.5,
          pagination: false,
          arrows: false,
          cover: true,
          focus: 'center',
          updateOnMove: true,
        })

        // Detect screen size for thumbnail layout
        const isDesktop = window.innerWidth >= 768

        // Thumbnails slider with responsive direction
        thumbnailSlider = new Splide('#thumbnail_slider', {
          type: 'loop',
          direction: isDesktop ? 'ttb' : 'ltr',
          rewindByDrag: true,
          keyboard: false,
          rewind: true,
          perPage: isDesktop ? 4 : 3,
          fixedWidth: isDesktop ? undefined : 80, // No fixed width on desktop for vertical layout
          fixedHeight: isDesktop ? 80 : 64, // Fixed height for vertical layout
          isNavigation: true,
          gap: isDesktop ? 12 : 8, // Larger gap for vertical layout
          focus: 'center',
          pagination: false,
          cover: true,
          arrows: true,
          trimSpace: false,
          height: isDesktop ? '60vh' : 'auto', // Set height for vertical layout
          breakpoints: {
            1024: {
              direction: 'ttb',
              perPage: 5,
              fixedHeight: 90,
              gap: 15,
              height: '65vh',
            },
            768: {
              direction: 'ttb',
              perPage: 4,
              fixedHeight: 80,
              gap: 12,
              height: '60vh',
            },
            767: {
              direction: 'ltr',
              perPage: 3,
              fixedWidth: 66,
              fixedHeight: 40,
              gap: 6,
              height: 'auto',
            },
            480: {
              direction: 'ltr',
              perPage: 2,
              fixedWidth: 60,
              fixedHeight: 36,
              gap: 4,
              height: 'auto',
            },
          },
        })

        // Mount thumbnail slider first
        thumbnailSlider.mount()

        // Sync the thumbnails slider as a target of primary slider
        primarySlider.sync(thumbnailSlider).mount()

        // Update slide counter
        primarySlider.on('moved', (newIndex) => {
          if (slideCounter) {
            slideCounter.textContent = `${newIndex + 1} / ${primarySlider?.length || 0}`
          }
        })
      }
    }

    // Function to close modal
    function closeModal() {
      if (!modal) return

      modal.classList.add('hidden')
      isModalOpen = false
      document.body.style.overflow = ''
    }

    // Event listeners for opening modal
    if (openButton) {
      openButton.addEventListener('click', (e) => {
        e.preventDefault()
        openModal()
      })
    }

    // Add click handler to BoxIcon
    const boxIcon = document.querySelector('[data-box-icon]')
    if (boxIcon) {
      boxIcon.addEventListener('click', (e) => {
        e.preventDefault()
        openModal()
      })
    }

    // Event listener for closing modal
    if (closeButton) {
      closeButton.addEventListener('click', closeModal)
    }

    // Close modal when clicking backdrop
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal()
        }
      })
    }

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isModalOpen) {
        closeModal()
      }
    })

    // Prevent modal close when clicking inside slider content
    const primarySliderContainer = document.getElementById('primary_slider')
    const thumbnailSliderContainer = document.getElementById('thumbnail_slider')

    if (primarySliderContainer) {
      primarySliderContainer.addEventListener('click', (e) => {
        e.stopPropagation()
      })
    }

    if (thumbnailSliderContainer) {
      thumbnailSliderContainer.addEventListener('click', (e) => {
        e.stopPropagation()
      })
    }
  })
</script>
