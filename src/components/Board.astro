---
// import { supabase } from "../../public/scripts/supabaseClient.js";
---

<div
  id="message-board-container"
  class="w-full max-w-2xl bg-base-100 p-6 rounded-lg shadow-xl justify-center mx-auto mt-20 font-merri"
>
  <h2
    class="text-2xl font-bold text-center mb-6 text-secondary font-gokhan tracking-wider"
  >
    Guest Book
  </h2>

  <!-- Message Input Form -->
  <form id="message-form" class="flex flex-col items-center gap-4 mb-8">
    <textarea
      id="message-input"
      class="textarea textarea-bordered w-3/4 h-28 text-base-content bg-base-200 placeholder-base-content/80 focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent rounded-md"
      placeholder="Song request, feedback, or anything else you'd like to share. Maybe the link to your ForrÃ³ playlist."
    ></textarea>
    <button
      type="submit"
      class="btn btn-secondary w-3/4 text-base-100 rounded-md"
      >Post Message</button
    >
  </form>

  <!-- Loading Indicator -->
  <div id="loading-indicator" class="text-center text-primary mb-4 hidden">
    Loading messages...
  </div>
  <div id="error-message" class="text-center text-error mb-4 hidden"></div>

  <!-- Messages Display Area -->
  <div id="messages-list" class="flex flex-col gap-4">
    <!-- Messages will be dynamically loaded here -->
    <div class="text-center text-secondary/70">
      No messages yet. Be the first to post!
    </div>
  </div>
</div>

<!-- Custom Confirmation Modal (part of the component's functionality) -->
<div
  id="confirm-modal"
  class="fixed inset-0 bg-black bg-opacity-50 justify-center items-center z-[1001] hidden"
>
  <div class="bg-white p-6 rounded-lg shadow-xl text-center max-w-sm w-full">
    <h3 id="confirm-modal-title" class="text-xl font-bold mb-4 text-gray-800">
    </h3>
    <p id="confirm-modal-message" class="mb-6 text-gray-700"></p>
    <div class="flex justify-center gap-4">
      <button id="confirm-modal-cancel" class="btn btn-ghost">Cancel</button>
      <button id="confirm-modal-ok" class="btn btn-error">OK</button>
    </div>
  </div>
</div>

<script type="module">
  import { supabase } from "../scripts/supabaseClient.js";

  let userId;

  // DOM Elements
  const messageForm = document.getElementById("message-form");
  const messageInput = document.getElementById("message-input");
  const messagesList = document.getElementById("messages-list");
  const loadingIndicator = document.getElementById("loading-indicator");
  const errorMessage = document.getElementById("error-message");

  // Confirmation Modal elements
  const confirmModal = document.getElementById("confirm-modal");
  const confirmModalTitle = document.getElementById("confirm-modal-title");
  const confirmModalMessage = document.getElementById("confirm-modal-message");
  const confirmModalCancelBtn = document.getElementById("confirm-modal-cancel");
  const confirmModalOkBtn = document.getElementById("confirm-modal-ok");
  let confirmCallback = null; // Callback for the confirmation modal

  /**
   * Initializes Supabase client and authenticates the user anonymously.
   * Sets up the Supabase client and user ID.
   */
  async function initializeSupabase() {
    try {
      loadingIndicator.classList.remove("hidden");
      errorMessage.classList.add("hidden"); // Clear any previous errors

      // Sign in anonymously if not already signed in
      const { data, error } = await supabase.auth.signInAnonymously();
      if (error) throw error;

      userId = data.user.id;
      console.log("Supabase User ID (Anonymous):", userId);

      // Start listening for messages after successful authentication
      listenForMessages();
    } catch (error) {
      console.error("Error initializing Supabase:", error);
      displayError(
        `Error initializing Supabase: ${error.message}. Please check your SUPABASE_URL and SUPABASE_KEY.`
      );
      loadingIndicator.classList.add("hidden");
    }
  }

  /**
   * Displays an error message to the user.
   * @param {string} message The error message to display.
   */
  function displayError(message) {
    errorMessage.textContent = `Error: ${message}`;
    errorMessage.classList.remove("hidden");
    loadingIndicator.classList.add("hidden");
  }

  /**
   * Adds a new message to the 'messages' table in Supabase.
   * @param {Event} e The submit event from the form.
   */
  async function addMessage(e) {
    e.preventDefault();
    if (!messageInput.value.trim()) {
      displayError("Message cannot be empty.");
      return;
    }
    if (!userId) {
      displayError("User not authenticated. Please wait or refresh.");
      return;
    }

    const messageContent = messageInput.value.trim();

    try {
      // Insert the new message into the 'messages' table
      // The 'user_id' column will be automatically populated by the RLS policy.
      const { error } = await supabase
        .from("messages") // Your table name
        .insert([{ content: messageContent }]);

      if (error) throw error;

      messageInput.value = ""; // Clear input after sending
      errorMessage.classList.add("hidden"); // Hide any previous errors
    } catch (error) {
      console.error("Error adding message:", error);
      displayError(`Failed to post message: ${error.message}`);
    }
  }

  /**
   * Listens for real-time updates to messages in Supabase.
   * This ensures the message list updates instantly across all connected clients.
   */
  function listenForMessages() {
    if (!supabase) {
      displayError("Supabase client not initialized.");
      return;
    }

    // Real-time subscription to 'messages' table changes
    supabase
      .channel("public:messages") // Listen to changes in the 'messages' table (public schema)
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "messages" },
        (payload) => {
          console.log("Change received!", payload);
          // On any change (INSERT, UPDATE, DELETE), re-fetch and re-display all messages
          fetchAndDisplayMessages();
        }
      )
      .subscribe();

    // Initial fetch and display of messages when the page loads
    fetchAndDisplayMessages();
  }

  /**
   * Fetches all messages from Supabase and displays them in the UI.
   */
  async function fetchAndDisplayMessages() {
    try {
      loadingIndicator.classList.remove("hidden");
      errorMessage.classList.add("hidden"); // Clear any previous errors

      const { data: messages, error } = await supabase
        .from("messages")
        .select("*") // Select all columns
        .order("created_at", { ascending: false }); // Order by creation time, newest first

      if (error) throw error;

      loadingIndicator.classList.add("hidden");
      displayMessages(messages);
    } catch (error) {
      console.error("Error fetching messages:", error);
      displayError(`Failed to load messages: ${error.message}`);
      loadingIndicator.classList.add("hidden");
    }
  }

  /**
   * Displays the fetched messages in the UI.
   * @param {Array<Object>} messages An array of message objects.
   */
  function displayMessages(messages) {
    messagesList.innerHTML = ""; // Clear previous messages

    if (messages.length === 0) {
      messagesList.innerHTML =
        '<div class="text-center text-base-content/60">No messages yet. Be the first to post!</div>';
      return;
    }

    messages.forEach((msg) => {
      const isAuthor = msg.user_id === userId; // Check if current user is the author

      const messageElement = document.createElement("div");
      messageElement.className =
        "bg-base-200 p-4 rounded-lg shadow-sm break-words"; // break-words for long messages
      messageElement.dataset.messageId = msg.id; // Store message ID for potential actions

      // Format timestamp
      const date = new Date(msg.created_at);
      const formattedDate = date.toLocaleString(); // e.g., "1/1/2024, 10:30:00 AM"

      messageElement.innerHTML = `
              <p class="text-base-content mb-2">${msg.content}</p>
              <div class="text-xs text-base-content/70 flex justify-between items-center">
                  <span>Posted by: <span class="font-bold">${msg.user_id}</span></span>
                  <span>${formattedDate}</span>
              </div>
              ${
                isAuthor
                  ? `
                  <div class="flex justify-end gap-2 mt-2">
                      <button class="btn btn-xs btn-warning delete-btn" data-id="${msg.id}">Delete</button>
                      <!-- You could add an edit button here too, handling the edit logic -->
                  </div>
              `
                  : ""
              }
          `;
      messagesList.appendChild(messageElement);
    });

    // Add event listeners for delete buttons
    document.querySelectorAll(".delete-btn").forEach((button) => {
      button.addEventListener("click", async (e) => {
        const messageIdToDelete = e.target.dataset.id;
        // Using a custom modal for confirmation instead of `confirm()`
        showConfirmModal(
          "Delete Message",
          "Are you sure you want to delete this message?",
          async (confirmed) => {
            if (confirmed) {
              await deleteMessage(messageIdToDelete);
            }
          }
        );
      });
    });
  }

  /**
   * Deletes a message from Supabase.
   * @param {string} messageId The ID of the message to delete.
   */
  async function deleteMessage(messageId) {
    try {
      const { error } = await supabase
        .from("messages")
        .delete()
        .eq("id", messageId); // Supabase RLS policies will handle the user_id check

      if (error) {
        // Check if it's an RLS permission error (common if RLS blocks it)
        if (error.code === "42501") {
          // PostgreSQL error code for insufficient_privilege
          displayError("You are not authorized to delete this message.");
        } else {
          throw error;
        }
      } else {
        console.log("Message deleted successfully.");
        errorMessage.classList.add("hidden"); // Clear any previous errors
        // The real-time listener will automatically refresh the list
      }
    } catch (error) {
      console.error("Error deleting message:", error);
      displayError(`Failed to delete message: ${error.message}`);
    }
  }

  // --- Custom Confirmation Modal Functions ---
  function showConfirmModal(title, message, callback) {
    confirmModalTitle.textContent = title;
    confirmModalMessage.textContent = message;
    confirmCallback = callback;
    confirmModal.classList.remove("hidden");
  }

  confirmModalCancelBtn.addEventListener("click", () => {
    confirmModal.classList.add("hidden");
    if (confirmCallback) confirmCallback(false);
  });

  confirmModalOkBtn.addEventListener("click", () => {
    confirmModal.classList.add("hidden");
    if (confirmCallback) confirmCallback(true);
  });
  // --- End Custom Confirmation Modal Functions ---

  // Initialize Supabase when the component loads
  // In Astro, this script runs client-side.
  // If this component is rendered on the server with `client:load` or similar,
  // this will run after the DOM is ready.
  document.addEventListener("DOMContentLoaded", initializeSupabase);
  messageForm.addEventListener("submit", addMessage); // Attach form listener after DOM is ready
</script>
