---
import '../styles/splide-custom.css'

interface Props {
  modalID?: string
  prefix: string
  triggerIDs: string[]
  images: Array<{ id: string; url: string; alt?: string }>
  showCounter?: boolean
}

const {
  triggerIDs = [],
  images = [],
  showCounter = false,
  prefix = '',
} = Astro.props

const modalID = `${prefix ? `${prefix}_` : ''}modalID`
const modalContent = `${prefix ? `${prefix}_` : ''}modalContent`
const closeGallery = `${prefix ? `${prefix}_` : ''}closeGallery`
const mainSlider = `${prefix ? `${prefix}_` : ''}mainSlider`
const thumbnailSlider = `${prefix ? `${prefix}_` : ''}thumbnailSlider`
const mobileSlider = `${prefix ? `${prefix}_` : ''}mobileSlider`
---

<div
  id={modalID}
  class="fixed inset-0 z-[9999] hidden backdrop-blur-md flex items-center justify-center"
  data-trigger-ids={JSON.stringify(triggerIDs)}
  data-show-counter={showCounter}
  data-prefix={prefix}
>
  <div
    id={modalContent}
    class="relative flex justify-center mx-auto w-full max-w-[55vw] h-full max-h-[90vh] px-4 py-4 rounded-lg overflow-hidden bg-transparent"
  >
    <!-- Close Button -->
    <button
      id={closeGallery}
      class="absolute top-4 right-4 z-[100] rounded-full p-2 transition-all duration-300 group backdrop-blur-sm bg-base-100/50"
      aria-label="Close gallery"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-5 h-5 sm:w-7 sm:h-7 text-base-content group-hover:text-accent"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>

    <!-- Desktop Layout -->
    <div class="hidden md:block h-full">
      <!-- Main Slider -->
      <section
        id={mainSlider}
        class="splide mb-4 max-w-[65vw] flex justify-center mx-auto"
      >
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] object-contain"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>

      <!-- Thumbnails -->
      <section
        id={thumbnailSlider}
        class="splide flex justify-center mx-auto max-w-[35vw]"
      >
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery thumbnail'}
                    class="w-full h-20 object-cover cursor-pointer transition-opacity bg-transparent"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>
    <!-- Mobile Layout -->
    <div class="block md:hidden h-full">
      <section
        id={mobileSlider}
        class="splide flex justify-center mx-auto max-w-[95vw]"
      >
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] max-w-[95vw] object-contain rounded-sm"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>
  </div>
</div>

<script>
  import { Splide } from '@splidejs/splide'
import '@splidejs/splide/dist/css/splide.min.css'
import {
  addEnhancedModalClose,
  createHiddenClassChecker,
} from '../scripts/modalUtils'

  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.querySelector('[data-trigger-ids]')
    if (!modal) return

    const prefix = modal?.dataset?.prefix || ''
    const modalID = `${prefix}${prefix ? '_' : ''}modalID`
    const modalContentID = `${prefix}${prefix ? '_' : ''}modalContent`
    const closeGalleryID = `${prefix}${prefix ? '_' : ''}closeGallery`
    const mainSliderID = `${prefix}${prefix ? '_' : ''}mainSlider`
    const thumbnailSliderID = `${prefix}${prefix ? '_' : ''}thumbnailSlider`
    const mobileSliderID = `${prefix}${prefix ? '_' : ''}mobileSlider`

    const modalContent = document.getElementById(modalContentID)
    const closeButton = document.getElementById(closeGalleryID)

    if (!modalContent || !closeButton) return

    const triggerIDs = JSON.parse(modal.dataset.triggerIds || '[]')
    const showCounter = modal.dataset.showCounter === 'true'

    const triggers = triggerIDs
      .map((id) => document.getElementById(id))
      .filter((el) => el !== null)

    let mainSliderInstance = null
    let thumbnailSliderInstance = null
    let mobileSliderInstance = null

    const closeModal = () => {
      modal.classList.add('hidden')
      document.body.style.overflow = ''
    }

    const openModal = () => {
      modal.classList.remove('hidden')
      document.body.style.overflow = 'hidden'
      // Initialize sliders after modal is visible
      setTimeout(() => {
        initializeSliders()
      }, 100)
    }

    const initializeSliders = () => {
      // Clean up existing instances
      if (mainSliderInstance) {
        mainSliderInstance.destroy()
        mainSliderInstance = null
      }
      if (thumbnailSliderInstance) {
        thumbnailSliderInstance.destroy()
        thumbnailSliderInstance = null
      }
      if (mobileSliderInstance) {
        mobileSliderInstance.destroy()
        mobileSliderInstance = null
      }

      const mainSliderElement = document.getElementById(mainSliderID)
      const thumbnailSliderElement = document.getElementById(thumbnailSliderID)
      const mobileSliderElement = document.getElementById(mobileSliderID)

      // Desktop sliders
      if (mainSliderElement && thumbnailSliderElement) {
        mainSliderInstance = new Splide(`#${mainSliderID}`, {
          type: 'fade',
          autoWidth: true,
          perPage: 1,
          rewind: true,
          focus: 'center',
          gap: 4,
          pagination: false,
          arrows: true,
          keyboard: 'global',
        })

        thumbnailSliderInstance = new Splide(`#${thumbnailSliderID}`, {
          type: 'slide',
          perPage: 3,
          rewind: true,
          focus: 'center',
          trimSpace: true,
          drag: 'free',
          fixedWidth: 100,
          isNavigation: true,
          gap: 10,
          pagination: false,
          arrows: false,
          keyboard: 'global',
          breakpoints: {
            600: {
              fixedWidth: 60,
              fixedHeight: 44,
            },
          },
        })

        mainSliderInstance.sync(thumbnailSliderInstance)
        mainSliderInstance.mount()
        thumbnailSliderInstance.mount()
      }

      // Mobile slider
      if (mobileSliderElement) {
        mobileSliderInstance = new Splide(`#${mobileSliderID}`, {
          type: 'slide',
          drag: 'free',
          snap: true,
          rewind: true,
          pagination: false,
          arrows: true,
        })

        // Add counter for mobile if requested
        if (showCounter) {
          mobileSliderInstance.on('mounted move', () => {
            const current = mobileSliderInstance.index + 1
            const total =
              mobileSliderInstance.Components.Controller.getEnd() + 1
            // Update or create counter
            let counter = mobileSliderElement.querySelector('.slide-counter')
            if (!counter) {
              counter = document.createElement('div')
              counter.className =
                'slide-counter absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-base-100/90 text-base-content px-4 py-2 rounded-full text-sm font-medium z-30'
              mobileSliderElement.appendChild(counter)
            }
            counter.textContent = `${current} / ${total}`
          })
        }

        mobileSliderInstance.mount()
      }
    }

    if (modal && modalContent) {
      const isOpen = createHiddenClassChecker(modal)
      addEnhancedModalClose(modal, modalContent, closeModal, isOpen)
    }

    triggers.forEach((btn) => btn.addEventListener('click', openModal))
    closeButton.addEventListener('click', closeModal)
  })
</script>
