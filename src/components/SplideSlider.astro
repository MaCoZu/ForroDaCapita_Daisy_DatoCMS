---
import '../styles/splide-custom.css'

interface Props {
  images: Array<{
    id: string
    url: string
    alt?: string
  }>
}

const { images = [] } = Astro.props
---

<div
  id="galleryModal"
  class="fixed inset-0 z-9999 hidden bg-base-100/60 backdrop-blur-md flex items-center justify-center"
>
  <!-- Modal Content Box (Does NOT fill full height/width!) -->
  <div
    id="modalContent"
    class="relative max-w-[95vw] max-h-[90vh] px-0 py-4 bg-white/10 rounded-lg overflow-hidden"
  >
    <!-- Close Button - positioned at top right -->
    <button
      id="closeGallery"
      class="absolute top-4 right-4 z-100 bg-base-300/20 hover:bg-base-300/30 rounded-full p-2 transition-all duration-300 group backdrop-blur-sm"
      aria-label="Close gallery"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-5 h-5 sm:w-7 sm:h-7 text-base-content group-hover:text-accent/80"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <!-- Desktop: Main slider with thumbnails -->
    <div class="hidden md:block">
      <!-- Main Slider -->
      <section id="main-slider" class="splide mb-4 max-w-[35vw]">
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] object-contain rounded-sm"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>

      <!-- Thumbnail Slider -->
      <section
        id="thumbnail-slider"
        class="splide flex justify-center mx-auto max-w-[35vw]"
      >
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery thumbnail'}
                    class="w-full h-20 object-cover cursor-pointer transition-opacity bg-transparent"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>

    <!-- Mobile: Simple slider -->
    <div class="block md:hidden">
      <section
        id="mobile-slider"
        class="splide flex justify-center mx-auto max-w-[95vw]"
      >
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] max-w-[95vw] object-contain rounded-sm"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>
  </div>
</div>

<script>
  import { Splide } from '@splidejs/splide'
  import '@splidejs/splide/dist/css/splide.min.css'
  import {
    addEnhancedModalClose,
    createHiddenClassChecker,
  } from '../scripts/modalUtils'

  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('galleryModal') as HTMLElement | null
    const modalContent = document.getElementById(
      'modalContent'
    ) as HTMLElement | null
    const openButton = document.getElementById(
      'openGallery'
    ) as HTMLElement | null
    const closeButton = document.getElementById(
      'closeGallery'
    ) as HTMLElement | null
    const boxIcon = document.querySelector(
      '[data-box-icon]'
    ) as HTMLElement | null

    let isModalOpen = false

    const closeModal = () => {
      if (modal) {
        modal.classList.add('hidden')
        isModalOpen = false
        document.body.style.overflow = ''
      }
    }

    const openModal = () => {
      if (!modal) return

      modal.classList.remove('hidden')
      isModalOpen = true
      document.body.style.overflow = 'hidden'

      // Initialize Desktop Sliders
      const mainSlider = document.getElementById('main-slider')
      const thumbnailSlider = document.getElementById('thumbnail-slider')

      if (mainSlider && thumbnailSlider) {
        const main = new Splide('#main-slider', {
          type: 'fade',
          rewind: true,
          pagination: false,
          arrows: true,
        })

        const thumbnails = new Splide('#thumbnail-slider', {
          type: 'slide',
          perPage: 3,
          rewind: true,
          focus: 'center',
          trimSpace: true,
          drag: 'free',
          fixedWidth: 100,
          isNavigation: true,
          gap: 10,
          pagination: false,
          arrows: false,
          keyboard: 'global',
          breakpoints: {
            600: {
              fixedWidth: 60,
              fixedHeight: 44,
            },
          },
        })

        main.sync(thumbnails)
        main.mount()
        thumbnails.mount()
      }

      // Initialize Mobile Slider
      const mobileSlider = document.getElementById('mobile-slider')
      if (mobileSlider) {
        const mobile = new Splide('#mobile-slider', {
          type: 'slide',
          drag: 'free',
          snap: true,
          rewind: true,
          pagination: false,
          arrows: true,
        })

        const counterElement = document.createElement('div')
        counterElement.className =
          'absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-base-100/90 text-base-content/70 px-6 py-2 rounded-full text-md font-medium z-30 shadow-md'
        counterElement.innerHTML =
          '<span class="current font-semibold">1</span> / <span class="total">0</span>'

        mobileSlider.classList.add('relative')
        mobileSlider.appendChild(counterElement)

        mobile.on('mounted move', () => {
          const currentSlide = mobile.index + 1
          const totalSlides = mobile.Components.Controller.getEnd() + 1

          const currentElement = counterElement.querySelector('.current')
          const totalElement = counterElement.querySelector('.total')

          if (currentElement && totalElement) {
            currentElement.textContent = currentSlide.toString()
            totalElement.textContent = totalSlides.toString()
          }
        })

        mobile.mount()
      }
    }

    // Attach modal close helpers
    if (modal && modalContent) {
      const isModalCurrentlyOpen = createHiddenClassChecker(modal)
      addEnhancedModalClose(
        modal,
        modalContent,
        closeModal,
        isModalCurrentlyOpen
      )
    }

    // Open modal triggers
    ;[openButton, boxIcon].forEach((btn) => {
      btn?.addEventListener('click', (e) => {
        e.preventDefault()
        openModal()
      })
    })

    // Close button
    closeButton?.addEventListener('click', closeModal)
  })
</script>
<style>
  .splide__slide:focus,
  .splide__slide:active,
  .splide__slide.is-active,
  .splide__arrow:focus,
  .splide__arrow:active,
  .splide__arrow.is-active {
    outline: none !important;
    border: none !important;
    box-shadow: none !important;
  }

  /* ✅ Custom Arrows */
  .splide__arrow {
    background: none !important;
    border: none !important;
    box-shadow: none !important;
    width: 40px;
    height: 40px;
    color: currentColor;
    background-color: #ce0c0c; /* Your custom background */
    border-radius: 50%;
    transition: background-color 0.3s ease;
  }

  /* ✅ Slide Counter (if used) */
  .splide-counter {
    position: absolute;
    bottom: 16px;
    right: 16px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    z-index: 10;
    backdrop-filter: blur(4px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .splide-counter.bottom-center {
    bottom: 16px;
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }

  .splide-counter .current {
    font-weight: 600;
  }

  .splide--nav .splide__slide.is-active {
    opacity: 1;
    border: none;
  }

  .splide__slide img {
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }

  .splide__slide img:hover,
  .splide__slide.is-active img {
    opacity: 1;
  }
</style>
