---
import '../styles/splide-custom.css'

interface Props {
  images: Array<{
    id: string
    url: string
    alt?: string
  }>
}

const { images = [] } = Astro.props
---

<div
  id="galleryModal"
  class="fixed inset-0 z-80 hidden bg-base-100/60 backdrop-blur-md"
  role="dialog"
  aria-modal="true"
  aria-labelledby="gallery-title"
>
  <!-- Modal Content Container - Responsive Layout -->
  <div
    class="relative w-full h-full flex flex-col md:flex-row items-center justify-center p-2 sm:p-4"
  >
    <!-- Close Button - positioned at top right -->
    <button
      id="closeGallery"
      class="absolute top-4 right-4 z-100 bg-base-300/20 hover:bg-base-300/30 rounded-full p-2 transition-all duration-300 group backdrop-blur-sm"
      aria-label="Close gallery"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-5 h-5 sm:w-7 sm:h-7 text-base-content group-hover:text-accent/80"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <!-- Desktop: Main slider with thumbnails -->
    <div class="hidden md:block">
      <!-- Main Slider -->
      <section id="main-slider" class="splide mb-4 max-w-[35vw]">
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] object-contain rounded-sm"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>

      <!-- Thumbnail Slider -->
      <section
        id="thumbnail-slider"
        class="splide flex justify-center mx-auto max-w-[35vw]"
      >
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery thumbnail'}
                    class="w-full h-20 object-cover cursor-pointer opacity-80 hover:opacity-100 focus:opacity-100 transition-opacity bg-transparent"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>

    <!-- Mobile: Simple slider -->
    <div class="block md:hidden">
      <section
        id="mobile-slider"
        class="splide flex justify-center mx-auto max-w-[95vw]"
      >
        <div class="splide__track">
          <ul class="splide__list">
            {
              images.map((image) => (
                <li class="splide__slide">
                  <img
                    src={image.url}
                    alt={image.alt || 'Gallery image'}
                    class="w-full h-[75vh] max-w-[95vw] object-contain rounded-sm"
                    loading="lazy"
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </div>
  </div>
</div>

<script>
  import { Splide } from '@splidejs/splide'
  import '@splidejs/splide/dist/css/splide.min.css'

  let isModalOpen = false

  document.addEventListener('DOMContentLoaded', () => {
    // Desktop: Main slider with thumbnails
    const mainSlider = document.getElementById('main-slider')
    const thumbnailSlider = document.getElementById('thumbnail-slider')
    const modal = document.getElementById('galleryModal')
    const openButton = document.getElementById('openGallery')
    const closeButton = document.getElementById('closeGallery')
    const slideCounter = document.getElementById('slideCounter')

    // Function to open modal
    function openModal() {
      if (!modal) return

      modal.classList.remove('hidden')
      isModalOpen = true
      document.body.style.overflow = 'hidden'

      if (mainSlider && thumbnailSlider) {
        const main = new Splide('#main-slider', {
          type: 'fade',
          rewind: true,
          pagination: false,
          arrows: true,
        })

        const thumbnails = new Splide('#thumbnail-slider', {
          type: 'slide',
          perPage: 3,
          rewind: true,
          focus: 'center',
          trimSpace: true,
          drag: 'free',
          fixedWidth: 100,
          // cover: true,
          // fixedHeight: 80,
          isNavigation: true,
          gap: 10,
          pagination: false,
          arrows: false,
          breakpoints: {
            600: {
              fixedWidth: 60,
              fixedHeight: 44,
            },
          },
        })

        main.sync(thumbnails)
        main.mount()
        thumbnails.mount()
      }

      const mobileSlider = document.getElementById('mobile-slider')
      if (mobileSlider) {
        const mobile = new Splide('#mobile-slider', {
          type: 'slide',
          drag: 'free',
          snap: true,
          rewind: true,
          pagination: false, // Disable default pagination
          arrows: true,
        })

        // Create custom counter with Tailwind classes
        const counterElement = document.createElement('div')
        counterElement.className =
          'absolute bottom-4 right-4 bg-black/70 text-white px-3 py-2 rounded-full text-sm font-medium z-10 backdrop-blur-sm shadow-lg'
        counterElement.innerHTML =
          '<span class="current font-semibold">1</span> / <span class="total">0</span>'

        // Add counter to the slider container (make sure container is relative)
        mobileSlider.classList.add('relative')
        mobileSlider.appendChild(counterElement)

        // Update counter on slide change
        mobile.on('mounted move', function () {
          const currentSlide = mobile.index + 1
          const totalSlides = mobile.Components.Controller.getEnd() + 1

          const currentElement = counterElement.querySelector('.current')
          const totalElement = counterElement.querySelector('.total')
          if (currentElement && totalElement) {
            currentElement.textContent = currentSlide.toString()
            totalElement.textContent = totalSlides.toString()
          }
        })
        // Bottom-center counter
        counterElement.className =
          'absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-base-100/60 text-base-content/70 px-4 py-2 rounded-full text-md font-medium z-10 shadow-lg'
        mobile.mount()
      }
    }

    // Function to close modal
    function closeModal() {
      if (!modal) return

      modal.classList.add('hidden')
      isModalOpen = false
      document.body.style.overflow = ''
    }

    // Event listeners for opening modal
    if (openButton) {
      openButton.addEventListener('click', (e) => {
        e.preventDefault()
        openModal()
      })
    }

    // Add click handler to BoxIcon
    const boxIcon = document.querySelector('[data-box-icon]')
    if (boxIcon) {
      boxIcon.addEventListener('click', (e) => {
        e.preventDefault()
        openModal()
      })
    }

    // Event listener for closing modal
    if (closeButton) {
      closeButton.addEventListener('click', closeModal)
    }

    // Close modal when clicking backdrop - robust implementation
    if (modal) {
      modal.addEventListener('click', (e) => {
        // Get the modal content container (the div with the actual content)
        const modalContent = modal.querySelector('.relative.w-full.h-full')
        if (!modalContent) return

        const rect = modalContent.getBoundingClientRect()
        const isInModal =
          rect.top <= e.clientY &&
          e.clientY <= rect.top + rect.height &&
          rect.left <= e.clientX &&
          e.clientX <= rect.left + rect.width

        if (!isInModal) {
          closeModal()
        }
      })
    }

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
        closeModal()
      }
    })
  })
</script>
<style>
  .splide-counter {
    position: absolute;
    bottom: 16px;
    right: 16px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    z-index: 10;
    backdrop-filter: blur(4px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .splide-counter.bottom-center {
    bottom: 16px;
    left: 50%;
    right: auto;
    transform: translateX(-50%);
  }

  .splide-counter .current {
    font-weight: 600;
  }

  .splide--nav > .splide__track > .splide__list > .splide__slide.is-active {
    opacity: 1;
    border: 0px;
  }

  .splide__arrow {
    width: 40px;
    height: 40px;
    background-color: #ce0c0c;
    border-radius: 50%;
  }
</style>
